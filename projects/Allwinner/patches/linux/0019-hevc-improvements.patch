diff --git a/drivers/media/v4l2-core/v4l2-ctrls.c b/drivers/media/v4l2-core/v4l2-ctrls.c
index 03f424468428..c2cc8ab05451 100644
--- a/drivers/media/v4l2-core/v4l2-ctrls.c
+++ b/drivers/media/v4l2-core/v4l2-ctrls.c
@@ -916,6 +916,7 @@ const char *v4l2_ctrl_get_name(u32 id)
 	case V4L2_CID_MPEG_VIDEO_HEVC_SPS:			return "HEVC Sequence Parameter Set";
 	case V4L2_CID_MPEG_VIDEO_HEVC_PPS:			return "HEVC Picture Parameter Set";
 	case V4L2_CID_MPEG_VIDEO_HEVC_SLICE_PARAMS:		return "HEVC Slice Parameters";
+	case V4L2_CID_MPEG_VIDEO_HEVC_SCALING_MATRIX:		return "HEVC Scaling Matrix";
 
 	/* CAMERA controls */
 	/* Keep the order of the 'case's the same as in v4l2-controls.h! */
@@ -1332,6 +1333,9 @@ void v4l2_ctrl_fill(u32 id, const char **name, enum v4l2_ctrl_type *type,
 	case V4L2_CID_MPEG_VIDEO_HEVC_SLICE_PARAMS:
 		*type = V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS;
 		break;
+	case V4L2_CID_MPEG_VIDEO_HEVC_SCALING_MATRIX:
+		*type = V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX;
+		break;
 	default:
 		*type = V4L2_CTRL_TYPE_INTEGER;
 		break;
@@ -1708,6 +1712,7 @@ static int std_validate(const struct v4l2_ctrl *ctrl, u32 idx,
 	case V4L2_CTRL_TYPE_HEVC_SPS:
 	case V4L2_CTRL_TYPE_HEVC_PPS:
 	case V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS:
+	case V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX:
 		return 0;
 
 	default:
@@ -2314,6 +2319,9 @@ static struct v4l2_ctrl *v4l2_ctrl_new(struct v4l2_ctrl_handler *hdl,
 	case V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS:
 		elem_size = sizeof(struct v4l2_ctrl_hevc_slice_params);
 		break;
+	case V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX:
+		elem_size = sizeof(struct v4l2_ctrl_hevc_scaling_matrix);
+		break;
 	default:
 		if (type < V4L2_CTRL_COMPOUND_TYPES)
 			elem_size = sizeof(s32);
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus.c b/drivers/staging/media/sunxi/cedrus/cedrus.c
index 93d959bf2be4..dc25206c737f 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus.c
@@ -88,6 +88,12 @@ static const struct cedrus_control cedrus_controls[] = {
 		.codec		= CEDRUS_CODEC_H265,
 		.required	= true,
 	},
+	{
+		.id		= V4L2_CID_MPEG_VIDEO_HEVC_SCALING_MATRIX,
+		.elem_size	= sizeof(struct v4l2_ctrl_hevc_scaling_matrix),
+		.codec		= CEDRUS_CODEC_H265,
+		.required	= true,
+	},
 };
 
 #define CEDRUS_CONTROLS_COUNT	ARRAY_SIZE(cedrus_controls)
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus.h b/drivers/staging/media/sunxi/cedrus/cedrus.h
index fbdd8f963d99..862399a86bb4 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus.h
+++ b/drivers/staging/media/sunxi/cedrus/cedrus.h
@@ -72,6 +72,7 @@ struct cedrus_h265_run {
 	const struct v4l2_ctrl_hevc_sps			*sps;
 	const struct v4l2_ctrl_hevc_pps			*pps;
 	const struct v4l2_ctrl_hevc_slice_params	*slice_params;
+	const struct v4l2_ctrl_hevc_scaling_matrix	*scaling_matrix;
 };
 
 struct cedrus_run {
@@ -88,6 +89,10 @@ struct cedrus_run {
 struct cedrus_buffer {
 	struct v4l2_m2m_buffer          m2m_buf;
 
+	void		*mv_col_buf;
+	dma_addr_t	mv_col_buf_dma;
+	ssize_t		mv_col_buf_size;
+
 	union {
 		struct {
 			unsigned int			position;
@@ -121,12 +126,10 @@ struct cedrus_ctx {
 			dma_addr_t	pic_info_buf_dma;
 		} h264;
 		struct {
-			void		*mv_col_buf;
-			dma_addr_t	mv_col_buf_addr;
-			ssize_t		mv_col_buf_size;
-			ssize_t		mv_col_buf_unit_size;
 			void		*neighbor_info_buf;
 			dma_addr_t	neighbor_info_buf_addr;
+			void		*entry_points_buf;
+			dma_addr_t	entry_points_buf_addr;
 		} h265;
 	} codec;
 };
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus_dec.c b/drivers/staging/media/sunxi/cedrus/cedrus_dec.c
index bc41357ef3e6..ea10a6dbb80d 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus_dec.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus_dec.c
@@ -66,6 +66,8 @@ void cedrus_device_run(void *priv)
 			V4L2_CID_MPEG_VIDEO_HEVC_PPS);
 		run.h265.slice_params = cedrus_find_control_data(ctx,
 			V4L2_CID_MPEG_VIDEO_HEVC_SLICE_PARAMS);
+		run.h265.scaling_matrix = cedrus_find_control_data(ctx,
+			V4L2_CID_MPEG_VIDEO_HEVC_SCALING_MATRIX);
 		break;
 
 	default:
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus_h265.c b/drivers/staging/media/sunxi/cedrus/cedrus_h265.c
index 08ecaddd59aa..6f2f24833323 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus_h265.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus_h265.c
@@ -82,32 +82,31 @@ static void cedrus_h265_sram_write_data(struct cedrus_dev *dev, u32 *data,
 }
 
 static inline dma_addr_t cedrus_h265_frame_info_mv_col_buf_addr(
-	struct cedrus_ctx *ctx, unsigned int index, unsigned int field)
+	struct cedrus_ctx *ctx, unsigned int index)
 {
-	return ctx->codec.h265.mv_col_buf_addr + index *
-	       ctx->codec.h265.mv_col_buf_unit_size +
-	       field * ctx->codec.h265.mv_col_buf_unit_size / 2;
+	struct cedrus_buffer *cedrus_buf;
+
+	cedrus_buf = vb2_to_cedrus_buffer(ctx->dst_bufs[index]);
+
+	return cedrus_buf->mv_col_buf_dma;
 }
 
 static void cedrus_h265_frame_info_write_single(struct cedrus_dev *dev,
 						unsigned int index,
-						bool field_pic,
-						u32 pic_order_cnt[],
-						dma_addr_t mv_col_buf_addr[],
+						u32 pic_order_cnt,
+						dma_addr_t mv_col_buf_addr,
 						dma_addr_t dst_luma_addr,
 						dma_addr_t dst_chroma_addr)
 {
 	u32 offset = VE_DEC_H265_SRAM_OFFSET_FRAME_INFO +
 		     VE_DEC_H265_SRAM_OFFSET_FRAME_INFO_UNIT * index;
 	struct cedrus_h265_sram_frame_info frame_info = {
-		.top_pic_order_cnt = pic_order_cnt[0],
-		.bottom_pic_order_cnt = field_pic ? pic_order_cnt[1] :
-					pic_order_cnt[0],
+		.top_pic_order_cnt = pic_order_cnt,
+		.bottom_pic_order_cnt = pic_order_cnt,
 		.top_mv_col_buf_addr =
-			VE_DEC_H265_SRAM_DATA_ADDR_BASE(mv_col_buf_addr[0]),
-		.bottom_mv_col_buf_addr = field_pic ?
-			VE_DEC_H265_SRAM_DATA_ADDR_BASE(mv_col_buf_addr[1]) :
-			VE_DEC_H265_SRAM_DATA_ADDR_BASE(mv_col_buf_addr[0]),
+			VE_DEC_H265_SRAM_DATA_ADDR_BASE(mv_col_buf_addr),
+		.bottom_mv_col_buf_addr =
+			VE_DEC_H265_SRAM_DATA_ADDR_BASE(mv_col_buf_addr),
 		.luma_addr = VE_DEC_H265_SRAM_DATA_ADDR_BASE(dst_luma_addr),
 		.chroma_addr = VE_DEC_H265_SRAM_DATA_ADDR_BASE(dst_chroma_addr),
 	};
@@ -127,24 +126,22 @@ static void cedrus_h265_frame_info_write_dpb(struct cedrus_ctx *ctx,
 
 	for (i = 0; i < num_active_dpb_entries; i++) {
 		dma_addr_t dst_luma_addr, dst_chroma_addr;
-		dma_addr_t mv_col_buf_addr[2];
-		u32 pic_order_cnt[2];
+		dma_addr_t mv_col_buf_addr;
+		u32 pic_order_cnt;
 		int buffer_index = vb2_find_timestamp(cap_q, dpb[i].timestamp, 0);
 
+		if (buffer_index < 0) {
+			printk("Warning: HEVC frame reference issue");
+			continue;
+		}
+
 		dst_luma_addr = cedrus_dst_buf_addr(ctx, buffer_index, 0);
 		dst_chroma_addr = cedrus_dst_buf_addr(ctx, buffer_index, 1);
-		mv_col_buf_addr[0] = cedrus_h265_frame_info_mv_col_buf_addr(ctx,
-			buffer_index, 0);
-		pic_order_cnt[0] = dpb[i].pic_order_cnt[0];
-
-		if (dpb[i].field_pic) {
-			mv_col_buf_addr[1] =
-				cedrus_h265_frame_info_mv_col_buf_addr(ctx,
-				buffer_index, 1);
-			pic_order_cnt[1] = dpb[i].pic_order_cnt[1];
-		}
+		mv_col_buf_addr = cedrus_h265_frame_info_mv_col_buf_addr(ctx,
+			buffer_index);
+		pic_order_cnt = dpb[i].pic_order_cnt[0];
 
-		cedrus_h265_frame_info_write_single(dev, i, dpb[i].field_pic,
+		cedrus_h265_frame_info_write_single(dev, i,
 						    pic_order_cnt,
 						    mv_col_buf_addr,
 						    dst_luma_addr,
@@ -152,6 +149,19 @@ static void cedrus_h265_frame_info_write_dpb(struct cedrus_ctx *ctx,
 	}
 }
 
+static void cedrus_hevc_write_sram(struct cedrus_dev *dev, u32 offset,
+				   const void *data, size_t len)
+{
+	const u32 *buffer = data;
+	size_t count = DIV_ROUND_UP(len, 4);
+
+	cedrus_write(dev, VE_DEC_H265_SRAM_OFFSET, offset);
+
+	do {
+		cedrus_write(dev, VE_DEC_H265_SRAM_DATA, *buffer++);
+	} while (--count);
+}
+
 static void cedrus_h265_ref_pic_list_write(struct cedrus_dev *dev,
 					   const u8 list[],
 					   u8 num_ref_idx_active,
@@ -159,26 +169,23 @@ static void cedrus_h265_ref_pic_list_write(struct cedrus_dev *dev,
 					   u8 num_active_dpb_entries,
 					   u32 sram_offset)
 {
+	u8 sram_array[V4L2_HEVC_DPB_ENTRIES_NUM_MAX];
 	unsigned int i;
-	u32 reg = 0;
 
-	cedrus_h265_sram_write_offset(dev, sram_offset);
+	memset(sram_array, 0, sizeof(sram_array));
+	num_ref_idx_active = min(num_ref_idx_active,
+				 (u8)V4L2_HEVC_DPB_ENTRIES_NUM_MAX);
 
 	for (i = 0; i < num_ref_idx_active; i++) {
-		unsigned int shift = (i % 4) * 8;
 		unsigned int index = list[i];
-		u8 value = list[i];
 
+		sram_array[i] = index;
 		if (dpb[index].rps == V4L2_HEVC_DPB_ENTRY_RPS_LT_CURR)
-			value |= VE_DEC_H265_SRAM_REF_PIC_LIST_LT_REF;
-
-		reg |= value << shift;
-
-		if ((i % 4) == 3 || i == (num_ref_idx_active - 1)) {
-			cedrus_h265_sram_write_data(dev, &reg, 1);
-			reg = 0;
-		}
+			sram_array[i] |= VE_DEC_H265_SRAM_REF_PIC_LIST_LT_REF;
 	}
+
+	cedrus_hevc_write_sram(dev, sram_offset, &sram_array,
+			       num_ref_idx_active);
 }
 
 static void cedrus_h265_pred_weight_write(struct cedrus_dev *dev,
@@ -218,6 +225,102 @@ static void cedrus_h265_pred_weight_write(struct cedrus_dev *dev,
 	}
 }
 
+static void cedrus_h265_write_scaling_list(struct cedrus_ctx *ctx,
+					   struct cedrus_run *run)
+{
+	const struct v4l2_ctrl_hevc_scaling_matrix *scaling;
+	struct cedrus_dev *dev = ctx->dev;
+
+	scaling = run->h265.scaling_matrix;
+
+	cedrus_write(dev, VE_DEC_H265_SCALING_LIST_DC_COEF0,
+		     (scaling->scaling_list_dc_coef_32x32[1] << 24) |
+		     (scaling->scaling_list_dc_coef_32x32[0] << 16) |
+		     (scaling->scaling_list_dc_coef_16x16[1] << 8) |
+		     (scaling->scaling_list_dc_coef_16x16[0] << 0));
+
+	cedrus_write(dev, VE_DEC_H265_SCALING_LIST_DC_COEF1,
+		     (scaling->scaling_list_dc_coef_16x16[5] << 24) |
+		     (scaling->scaling_list_dc_coef_16x16[4] << 16) |
+		     (scaling->scaling_list_dc_coef_16x16[3] << 8) |
+		     (scaling->scaling_list_dc_coef_16x16[2] << 0));
+
+	cedrus_hevc_write_sram(dev, VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_8x8,
+			       scaling->scaling_list_8x8,
+			       sizeof(scaling->scaling_list_8x8));
+	cedrus_hevc_write_sram(dev, VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_32x32,
+			       scaling->scaling_list_32x32,
+			       sizeof(scaling->scaling_list_32x32));
+	cedrus_hevc_write_sram(dev, VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_16x16,
+			       scaling->scaling_list_16x16,
+			       sizeof(scaling->scaling_list_16x16));
+	cedrus_hevc_write_sram(dev, VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_4x4,
+			       scaling->scaling_list_4x4,
+			       sizeof(scaling->scaling_list_4x4));
+}
+
+static void write_entry_point_list(struct cedrus_ctx *ctx,
+				   struct cedrus_run *run)
+{
+	const struct v4l2_ctrl_hevc_slice_params *slice_params;
+	unsigned int ctb_size_luma, width_in_ctb_luma;
+	unsigned int log2_max_luma_coding_block_size;
+	const struct v4l2_ctrl_hevc_pps *pps;
+	const struct v4l2_ctrl_hevc_sps *sps;
+	struct cedrus_dev *dev = ctx->dev;
+	uint32_t *entry_points;
+	int i, x, tx, y, ty;
+
+	pps = run->h265.pps;
+	sps = run->h265.sps;
+	slice_params = run->h265.slice_params;
+
+	log2_max_luma_coding_block_size =
+		sps->log2_min_luma_coding_block_size_minus3 + 3 +
+		sps->log2_diff_max_min_luma_coding_block_size;
+	ctb_size_luma = 1 << log2_max_luma_coding_block_size;
+	width_in_ctb_luma = DIV_ROUND_UP(sps->pic_width_in_luma_samples, ctb_size_luma);
+
+	for (x = 0, tx = 0; tx < pps->num_tile_columns_minus1 + 1; tx++) {
+		if (x + pps->column_width_minus1[tx] + 1 > (slice_params->slice_segment_addr % width_in_ctb_luma))
+			break;
+
+		x += pps->column_width_minus1[tx] + 1;
+	}
+
+	for (y = 0, ty = 0; ty < pps->num_tile_rows_minus1 + 1; ty++) {
+		if (y + pps->row_height_minus1[ty] + 1 > (slice_params->slice_segment_addr / width_in_ctb_luma))
+			break;
+
+		y += pps->row_height_minus1[ty] + 1;
+	}
+
+	cedrus_write(dev, VE_DEC_H265_TILE_START_CTB, (y << 16) | (x << 0));
+	cedrus_write(dev, VE_DEC_H265_TILE_END_CTB,
+		     ((y + pps->row_height_minus1[ty]) << 16) |
+		     ((x + pps->column_width_minus1[tx]) << 0));
+
+	entry_points = ctx->codec.h265.entry_points_buf;
+	if (pps->entropy_coding_sync_enabled_flag) {
+		for (i = 0; i < slice_params->num_entry_point_offsets; i++)
+			entry_points[i] = slice_params->entry_point_offset_minus1[i] + 1;
+	} else {
+		for (i = 0; i < slice_params->num_entry_point_offsets; i++) {
+			if (tx + 1 >= pps->num_tile_columns_minus1 + 1) {
+				x = tx = 0;
+				y += pps->row_height_minus1[ty++] + 1;
+			} else {
+				x += pps->column_width_minus1[tx++] + 1;
+			}
+
+			entry_points[i * 4 + 0] = slice_params->entry_point_offset_minus1[i] + 1;
+			entry_points[i * 4 + 1] = 0x0;
+			entry_points[i * 4 + 2] = (y << 16) | (x << 0);
+			entry_points[i * 4 + 3] = ((y + pps->row_height_minus1[ty]) << 16) | ((x + pps->column_width_minus1[tx]) << 0);
+		}
+	}
+}
+
 static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 			      struct cedrus_run *run)
 {
@@ -229,10 +332,11 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	dma_addr_t src_buf_addr;
 	dma_addr_t src_buf_end_addr;
 	dma_addr_t dst_luma_addr, dst_chroma_addr;
-	dma_addr_t mv_col_buf_addr[2];
+	struct cedrus_buffer *cedrus_buf;
+	dma_addr_t mv_col_buf_addr;
 	u32 chroma_log2_weight_denom;
 	u32 output_pic_list_index;
-	u32 pic_order_cnt[2];
+	u32 pic_order_cnt;
 	u32 reg;
 
 	sps = run->h265.sps;
@@ -240,43 +344,10 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	slice_params = run->h265.slice_params;
 	pred_weight_table = &slice_params->pred_weight_table;
 
-	/* MV column buffer size and allocation. */
-	if (!ctx->codec.h265.mv_col_buf_size) {
-		unsigned int num_buffers =
-			run->dst->vb2_buf.vb2_queue->num_buffers;
-		unsigned int log2_max_luma_coding_block_size =
-			sps->log2_min_luma_coding_block_size_minus3 + 3 +
-			sps->log2_diff_max_min_luma_coding_block_size;
-		unsigned int ctb_size_luma =
-			1 << log2_max_luma_coding_block_size;
-
-		/*
-		 * Each CTB requires a MV col buffer with a specific unit size.
-		 * Since the address is given with missing lsb bits, 1 KiB is
-		 * added to each buffer to ensure proper alignment.
-		 */
-		ctx->codec.h265.mv_col_buf_unit_size =
-			DIV_ROUND_UP(ctx->src_fmt.width, ctb_size_luma) *
-			DIV_ROUND_UP(ctx->src_fmt.height, ctb_size_luma) *
-			CEDRUS_H265_MV_COL_BUF_UNIT_CTB_SIZE + SZ_1K;
-
-		ctx->codec.h265.mv_col_buf_size = num_buffers *
-			ctx->codec.h265.mv_col_buf_unit_size;
-
-		ctx->codec.h265.mv_col_buf =
-			dma_alloc_coherent(dev->dev,
-					   ctx->codec.h265.mv_col_buf_size,
-					   &ctx->codec.h265.mv_col_buf_addr,
-					   GFP_KERNEL);
-		if (!ctx->codec.h265.mv_col_buf) {
-			ctx->codec.h265.mv_col_buf_size = 0;
-			// TODO: Abort the process here.
-			return;
-		}
-	}
-
 	/* Activate H265 engine. */
 	cedrus_engine_enable(dev, CEDRUS_CODEC_H265);
+	if (sps->pic_width_in_luma_samples > 2048)
+		cedrus_write(dev, VE_MODE, cedrus_read(dev, VE_MODE) | BIT(21));
 
 	/* Source offset and length in bits. */
 
@@ -300,18 +371,32 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	src_buf_end_addr = src_buf_addr +
 			   DIV_ROUND_UP(slice_params->bit_size, 8);
 
-	reg = VE_DEC_H265_BITS_END_ADDR_BASE(src_buf_end_addr);
+	reg = VE_DEC_H265_BITS_END_ADDR_BASE(ALIGN(src_buf_end_addr, 1024) - 1);
 	cedrus_write(dev, VE_DEC_H265_BITS_END_ADDR, reg);
 
-	/* Coding tree block address: start at the beginning. */
-	reg = VE_DEC_H265_DEC_CTB_ADDR_X(0) | VE_DEC_H265_DEC_CTB_ADDR_Y(0);
-	cedrus_write(dev, VE_DEC_H265_DEC_CTB_ADDR, reg);
+	if (pps->tiles_enabled_flag || pps->entropy_coding_sync_enabled_flag)
+		write_entry_point_list(ctx, run);
 
-	cedrus_write(dev, VE_DEC_H265_TILE_START_CTB, 0);
-	cedrus_write(dev, VE_DEC_H265_TILE_END_CTB, 0);
+	/* Coding tree block address */
+	reg = 0;
+	if (!slice_params->first_slice_segment_in_pic_flag) {
+		unsigned int ctb_size_luma, width_in_ctb_luma;
+		unsigned int log2_max_luma_coding_block_size;
+
+		log2_max_luma_coding_block_size =
+			sps->log2_min_luma_coding_block_size_minus3 + 3 +
+			sps->log2_diff_max_min_luma_coding_block_size;
+		ctb_size_luma = 1 << log2_max_luma_coding_block_size;
+		width_in_ctb_luma = DIV_ROUND_UP(sps->pic_width_in_luma_samples, ctb_size_luma);
+
+		reg = VE_DEC_H265_DEC_CTB_ADDR_X(slice_params->slice_segment_addr % width_in_ctb_luma);
+		reg |= VE_DEC_H265_DEC_CTB_ADDR_Y(slice_params->slice_segment_addr / width_in_ctb_luma);
+	}
+	cedrus_write(dev, VE_DEC_H265_DEC_CTB_ADDR, reg);
 
 	/* Clear the number of correctly-decoded coding tree blocks. */
-	cedrus_write(dev, VE_DEC_H265_DEC_CTB_NUM, 0);
+	if (slice_params->first_slice_segment_in_pic_flag)
+		cedrus_write(dev, VE_DEC_H265_DEC_CTB_NUM, 0);
 
 	/* Initialize bitstream access. */
 	cedrus_write(dev, VE_DEC_H265_TRIGGER, VE_DEC_H265_TRIGGER_INIT_SWDEC);
@@ -334,6 +419,7 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	      VE_DEC_H265_DEC_SPS_HDR_LOG2_DIFF_MAX_MIN_LUMA_CODING_BLOCK_SIZE(sps->log2_diff_max_min_luma_coding_block_size) |
 	      VE_DEC_H265_DEC_SPS_HDR_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3(sps->log2_min_luma_coding_block_size_minus3) |
 	      VE_DEC_H265_DEC_SPS_HDR_BIT_DEPTH_CHROMA_MINUS8(sps->bit_depth_chroma_minus8) |
+	      VE_DEC_H265_DEC_SPS_HDR_BIT_DEPTH_LUMA_MINUS8(sps->bit_depth_luma_minus8) |
 	      VE_DEC_H265_DEC_SPS_HDR_SEPARATE_COLOUR_PLANE_FLAG(sps->separate_colour_plane_flag) |
 	      VE_DEC_H265_DEC_SPS_HDR_CHROMA_FORMAT_IDC(sps->chroma_format_idc);
 
@@ -363,7 +449,7 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	      VE_DEC_H265_DEC_PPS_CTRL1_PPS_LOOP_FILTER_ACROSS_SLICES_ENABLED_FLAG(pps->pps_loop_filter_across_slices_enabled_flag) |
 	      VE_DEC_H265_DEC_PPS_CTRL1_LOOP_FILTER_ACROSS_TILES_ENABLED_FLAG(pps->loop_filter_across_tiles_enabled_flag) |
 	      VE_DEC_H265_DEC_PPS_CTRL1_ENTROPY_CODING_SYNC_ENABLED_FLAG(pps->entropy_coding_sync_enabled_flag) |
-	      VE_DEC_H265_DEC_PPS_CTRL1_TILES_ENABLED_FLAG(0) |
+	      VE_DEC_H265_DEC_PPS_CTRL1_TILES_ENABLED_FLAG(pps->tiles_enabled_flag) |
 	      VE_DEC_H265_DEC_PPS_CTRL1_TRANSQUANT_BYPASS_ENABLE_FLAG(pps->transquant_bypass_enabled_flag) |
 	      VE_DEC_H265_DEC_PPS_CTRL1_WEIGHTED_BIPRED_FLAG(pps->weighted_bipred_flag) |
 	      VE_DEC_H265_DEC_PPS_CTRL1_WEIGHTED_PRED_FLAG(pps->weighted_pred_flag);
@@ -384,7 +470,7 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 	      VE_DEC_H265_DEC_SLICE_HDR_INFO0_COLOUR_PLANE_ID(slice_params->colour_plane_id) |
 	      VE_DEC_H265_DEC_SLICE_HDR_INFO0_SLICE_TYPE(slice_params->slice_type) |
 	      VE_DEC_H265_DEC_SLICE_HDR_INFO0_DEPENDENT_SLICE_SEGMENT_FLAG(pps->dependent_slice_segment_flag) |
-	      VE_DEC_H265_DEC_SLICE_HDR_INFO0_FIRST_SLICE_SEGMENT_IN_PIC_FLAG(1);
+	      VE_DEC_H265_DEC_SLICE_HDR_INFO0_FIRST_SLICE_SEGMENT_IN_PIC_FLAG(slice_params->first_slice_segment_in_pic_flag);
 
 	cedrus_write(dev, VE_DEC_H265_DEC_SLICE_HDR_INFO0, reg);
 
@@ -401,45 +487,76 @@ static void cedrus_h265_setup(struct cedrus_ctx *ctx,
 
 	chroma_log2_weight_denom = pred_weight_table->luma_log2_weight_denom +
 				   pred_weight_table->delta_chroma_log2_weight_denom;
-	reg = VE_DEC_H265_DEC_SLICE_HDR_INFO2_NUM_ENTRY_POINT_OFFSETS(0) |
+	reg = VE_DEC_H265_DEC_SLICE_HDR_INFO2_NUM_ENTRY_POINT_OFFSETS(slice_params->num_entry_point_offsets) |
 	      VE_DEC_H265_DEC_SLICE_HDR_INFO2_CHROMA_LOG2_WEIGHT_DENOM(chroma_log2_weight_denom) |
 	      VE_DEC_H265_DEC_SLICE_HDR_INFO2_LUMA_LOG2_WEIGHT_DENOM(pred_weight_table->luma_log2_weight_denom);
 
 	cedrus_write(dev, VE_DEC_H265_DEC_SLICE_HDR_INFO2, reg);
 
+	cedrus_write(dev, VE_DEC_H265_ENTRY_POINT_OFFSET_ADDR, ctx->codec.h265.entry_points_buf_addr >> 8);
+
 	/* Decoded picture size. */
 
-	reg = VE_DEC_H265_DEC_PIC_SIZE_WIDTH(ctx->src_fmt.width) |
-	      VE_DEC_H265_DEC_PIC_SIZE_HEIGHT(ctx->src_fmt.height);
+	reg = VE_DEC_H265_DEC_PIC_SIZE_WIDTH(sps->pic_width_in_luma_samples) |
+	      VE_DEC_H265_DEC_PIC_SIZE_HEIGHT(sps->pic_height_in_luma_samples);
 
 	cedrus_write(dev, VE_DEC_H265_DEC_PIC_SIZE, reg);
 
 	/* Scaling list */
 
-	reg = VE_DEC_H265_SCALING_LIST_CTRL0_DEFAULT;
+	if (sps->scaling_list_enabled_flag) {
+		cedrus_h265_write_scaling_list(ctx, run);
+		reg = VE_DEC_H265_SCALING_LIST_CTRL0_ENABLED_FLAG(1);
+	} else {
+		reg = VE_DEC_H265_SCALING_LIST_CTRL0_DEFAULT;
+	}
 	cedrus_write(dev, VE_DEC_H265_SCALING_LIST_CTRL0, reg);
 
 	/* Neightbor information address. */
 	reg = VE_DEC_H265_NEIGHBOR_INFO_ADDR_BASE(ctx->codec.h265.neighbor_info_buf_addr);
 	cedrus_write(dev, VE_DEC_H265_NEIGHBOR_INFO_ADDR, reg);
 
+	cedrus_write(dev, VE_DEC_H265_LOW_ADDR, 0);
+
 	/* Write decoded picture buffer in pic list. */
 	cedrus_h265_frame_info_write_dpb(ctx, slice_params->dpb,
 					 slice_params->num_active_dpb_entries);
 
 	/* Output frame. */
 
+	cedrus_buf = vb2_to_cedrus_buffer(ctx->dst_bufs[run->dst->vb2_buf.index]);
+	if (!cedrus_buf->mv_col_buf_size) {
+		unsigned int ctb_size_luma, width_in_ctb_luma;
+		unsigned int log2_max_luma_coding_block_size;
+
+		log2_max_luma_coding_block_size =
+			sps->log2_min_luma_coding_block_size_minus3 + 3 +
+			sps->log2_diff_max_min_luma_coding_block_size;
+		ctb_size_luma = 1 << log2_max_luma_coding_block_size;
+		width_in_ctb_luma = DIV_ROUND_UP(sps->pic_width_in_luma_samples, ctb_size_luma);
+
+		cedrus_buf->mv_col_buf_size = ALIGN(width_in_ctb_luma *
+		DIV_ROUND_UP(sps->pic_height_in_luma_samples, ctb_size_luma) *
+		CEDRUS_H265_MV_COL_BUF_UNIT_CTB_SIZE, 1024);
+
+		cedrus_buf->mv_col_buf =
+			dma_alloc_coherent(dev->dev,
+					   cedrus_buf->mv_col_buf_size,
+					   &cedrus_buf->mv_col_buf_dma,
+					   GFP_KERNEL);
+
+		if (!cedrus_buf->mv_col_buf)
+			cedrus_buf->mv_col_buf_size = 0;
+	}
+
 	output_pic_list_index = V4L2_HEVC_DPB_ENTRIES_NUM_MAX;
-	pic_order_cnt[0] = pic_order_cnt[1] = slice_params->slice_pic_order_cnt;
-	mv_col_buf_addr[0] = cedrus_h265_frame_info_mv_col_buf_addr(ctx,
-		run->dst->vb2_buf.index, 0);
-	mv_col_buf_addr[1] = cedrus_h265_frame_info_mv_col_buf_addr(ctx,
-		run->dst->vb2_buf.index, 1);
+	pic_order_cnt = slice_params->slice_pic_order_cnt;
+	mv_col_buf_addr = cedrus_h265_frame_info_mv_col_buf_addr(ctx,
+		run->dst->vb2_buf.index);
 	dst_luma_addr = cedrus_dst_buf_addr(ctx, run->dst->vb2_buf.index, 0);
 	dst_chroma_addr = cedrus_dst_buf_addr(ctx, run->dst->vb2_buf.index, 1);
 
 	cedrus_h265_frame_info_write_single(dev, output_pic_list_index,
-					    slice_params->pic_struct != 0,
 					    pic_order_cnt, mv_col_buf_addr,
 					    dst_luma_addr, dst_chroma_addr);
 
@@ -490,9 +607,6 @@ static int cedrus_h265_start(struct cedrus_ctx *ctx)
 {
 	struct cedrus_dev *dev = ctx->dev;
 
-	/* The buffer size is calculated at setup time. */
-	ctx->codec.h265.mv_col_buf_size = 0;
-
 	ctx->codec.h265.neighbor_info_buf =
 		dma_alloc_coherent(dev->dev, CEDRUS_H265_NEIGHBOR_INFO_BUF_SIZE,
 				   &ctx->codec.h265.neighbor_info_buf_addr,
@@ -500,6 +614,17 @@ static int cedrus_h265_start(struct cedrus_ctx *ctx)
 	if (!ctx->codec.h265.neighbor_info_buf)
 		return -ENOMEM;
 
+	ctx->codec.h265.entry_points_buf =
+		dma_alloc_coherent(dev->dev, CEDRUS_H265_ENTRY_POINTS_BUF_SIZE,
+				   &ctx->codec.h265.entry_points_buf_addr,
+				   GFP_KERNEL);
+	if (!ctx->codec.h265.entry_points_buf) {
+		dma_free_coherent(dev->dev, CEDRUS_H265_NEIGHBOR_INFO_BUF_SIZE,
+				  ctx->codec.h265.neighbor_info_buf,
+				  ctx->codec.h265.neighbor_info_buf_addr);
+		return -ENOMEM;
+	}
+
 	return 0;
 }
 
@@ -507,17 +632,12 @@ static void cedrus_h265_stop(struct cedrus_ctx *ctx)
 {
 	struct cedrus_dev *dev = ctx->dev;
 
-	if (ctx->codec.h265.mv_col_buf_size > 0) {
-		dma_free_coherent(dev->dev, ctx->codec.h265.mv_col_buf_size,
-				  ctx->codec.h265.mv_col_buf,
-				  ctx->codec.h265.mv_col_buf_addr);
-
-		ctx->codec.h265.mv_col_buf_size = 0;
-	}
-
 	dma_free_coherent(dev->dev, CEDRUS_H265_NEIGHBOR_INFO_BUF_SIZE,
 			  ctx->codec.h265.neighbor_info_buf,
 			  ctx->codec.h265.neighbor_info_buf_addr);
+	dma_free_coherent(dev->dev, CEDRUS_H265_ENTRY_POINTS_BUF_SIZE,
+			  ctx->codec.h265.entry_points_buf,
+			  ctx->codec.h265.entry_points_buf_addr);
 }
 
 static void cedrus_h265_trigger(struct cedrus_ctx *ctx)
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus_regs.h b/drivers/staging/media/sunxi/cedrus/cedrus_regs.h
index d87d13d6ed16..bf077e9b4103 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus_regs.h
+++ b/drivers/staging/media/sunxi/cedrus/cedrus_regs.h
@@ -496,6 +496,9 @@
 #define VE_DEC_H265_TILE_START_CTB		(VE_ENGINE_DEC_H265 + 0x68)
 #define VE_DEC_H265_TILE_END_CTB		(VE_ENGINE_DEC_H265 + 0x6c)
 
+#define VE_DEC_H265_SCALING_LIST_DC_COEF0	(VE_ENGINE_DEC_H265 + 0x78)
+#define VE_DEC_H265_SCALING_LIST_DC_COEF1	(VE_ENGINE_DEC_H265 + 0x7c)
+
 #define VE_DEC_H265_LOW_ADDR			(VE_ENGINE_DEC_H265 + 0x80)
 
 #define VE_DEC_H265_LOW_ADDR_PRIMARY_CHROMA(a) \
@@ -513,7 +516,10 @@
 #define VE_DEC_H265_SRAM_OFFSET_PRED_WEIGHT_CHROMA_L1	0x80
 #define VE_DEC_H265_SRAM_OFFSET_FRAME_INFO		0x400
 #define VE_DEC_H265_SRAM_OFFSET_FRAME_INFO_UNIT		0x20
-#define VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS		0x800
+#define VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_8x8	0x800
+#define VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_32x32	0x980
+#define VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_16x16	0xa00
+#define VE_DEC_H265_SRAM_OFFSET_SCALING_LISTS_4x4	0xb80
 #define VE_DEC_H265_SRAM_OFFSET_REF_PIC_LIST0		0xc00
 #define VE_DEC_H265_SRAM_OFFSET_REF_PIC_LIST1		0xc10
 
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus_video.c b/drivers/staging/media/sunxi/cedrus/cedrus_video.c
index 4eb95853f64b..558cfc9db4fb 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus_video.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus_video.c
@@ -423,8 +423,18 @@ static void cedrus_buf_cleanup(struct vb2_buffer *vb)
 	struct vb2_queue *vq = vb->vb2_queue;
 	struct cedrus_ctx *ctx = vb2_get_drv_priv(vq);
 
-	if (!V4L2_TYPE_IS_OUTPUT(vq->type))
+	if (!V4L2_TYPE_IS_OUTPUT(vq->type)) {
+		struct cedrus_buffer *cedrus_buf;
+
+		cedrus_buf = vb2_to_cedrus_buffer(ctx->dst_bufs[vb->index]);
+
+		if (cedrus_buf->mv_col_buf_size)
+			dma_free_coherent(ctx->dev->dev,
+					  cedrus_buf->mv_col_buf_size,
+					  cedrus_buf->mv_col_buf,
+					  cedrus_buf->mv_col_buf_dma);
 		ctx->dst_bufs[vb->index] = NULL;
+	}
 }
 
 static int cedrus_buf_prepare(struct vb2_buffer *vb)
diff --git a/include/media/v4l2-ctrls.h b/include/media/v4l2-ctrls.h
index 11664c5c3706..b4f126882fc3 100644
--- a/include/media/v4l2-ctrls.h
+++ b/include/media/v4l2-ctrls.h
@@ -51,6 +51,7 @@ struct poll_table_struct;
  * @p_hevc_sps:			Pointer to an HEVC sequence parameter set structure.
  * @p_hevc_pps:			Pointer to an HEVC picture parameter set structure.
  * @p_hevc_slice_params		Pointer to an HEVC slice parameters structure.
+ * @p_hevc_scaling_matrix	Pointer to an HEVC scaling matrix structure.
  * @p:				Pointer to a compound value.
  */
 union v4l2_ctrl_ptr {
@@ -70,6 +71,7 @@ union v4l2_ctrl_ptr {
 	struct v4l2_ctrl_hevc_sps *p_hevc_sps;
 	struct v4l2_ctrl_hevc_pps *p_hevc_pps;
 	struct v4l2_ctrl_hevc_slice_params *p_hevc_slice_params;
+	struct v4l2_ctrl_hevc_scaling_matrix *p_hevc_scaling_matrix;
 	void *p;
 };
 
diff --git a/include/uapi/linux/v4l2-controls.h b/include/uapi/linux/v4l2-controls.h
index 4a6fb8da33f9..eb3b9ec01404 100644
--- a/include/uapi/linux/v4l2-controls.h
+++ b/include/uapi/linux/v4l2-controls.h
@@ -712,6 +712,7 @@ enum v4l2_cid_mpeg_video_hevc_size_of_length_field {
 #define V4L2_CID_MPEG_VIDEO_HEVC_SPS			(V4L2_CID_MPEG_BASE + 645)
 #define V4L2_CID_MPEG_VIDEO_HEVC_PPS			(V4L2_CID_MPEG_BASE + 646)
 #define V4L2_CID_MPEG_VIDEO_HEVC_SLICE_PARAMS		(V4L2_CID_MPEG_BASE + 647)
+#define V4L2_CID_MPEG_VIDEO_HEVC_SCALING_MATRIX		(V4L2_CID_MPEG_BASE + 648)
 
 /*  MPEG-class control IDs specific to the CX2341x driver as defined by V4L2 */
 #define V4L2_CID_MPEG_CX2341X_BASE				(V4L2_CTRL_CLASS_MPEG | 0x1000)
@@ -1398,6 +1399,7 @@ struct v4l2_ctrl_hevc_pps {
 	__u8	lists_modification_present_flag;
 	__u8	log2_parallel_merge_level_minus2;
 	__u8	slice_segment_header_extension_present_flag;
+	__u8	scaling_list_enable_flag;
 };
 
 #define V4L2_HEVC_DPB_ENTRY_RPS_ST_CURR_BEFORE	0x01
@@ -1477,6 +1479,20 @@ struct v4l2_ctrl_hevc_slice_params {
 
 	/* ISO/IEC 23008-2, ITU-T Rec. H.265: Weighted prediction parameter */
 	struct v4l2_hevc_pred_weight_table pred_weight_table;
+
+	__u32	slice_segment_addr;
+	__u32	num_entry_point_offsets;
+	__u32	entry_point_offset_minus1[256];
+	__u8	first_slice_segment_in_pic_flag;
+};
+
+struct v4l2_ctrl_hevc_scaling_matrix {
+	__u8	scaling_list_4x4[6][16];
+	__u8	scaling_list_8x8[6][64];
+	__u8	scaling_list_16x16[6][64];
+	__u8	scaling_list_32x32[2][64];
+	__u8	scaling_list_dc_coef_16x16[6];
+	__u8	scaling_list_dc_coef_32x32[2];
 };
 
 #endif
diff --git a/include/uapi/linux/videodev2.h b/include/uapi/linux/videodev2.h
index a85bcdf13bda..3dd61ff3768d 100644
--- a/include/uapi/linux/videodev2.h
+++ b/include/uapi/linux/videodev2.h
@@ -1646,6 +1646,7 @@ struct v4l2_ext_control {
 		struct v4l2_ctrl_hevc_sps __user *p_hevc_sps;
 		struct v4l2_ctrl_hevc_pps __user *p_hevc_pps;
 		struct v4l2_ctrl_hevc_slice_params __user *p_hevc_slice_params;
+		struct v4l2_ctrl_hevc_scaling_matrix __user *p_hevc_scaling_matrix;
 		void __user *ptr;
 	};
 } __attribute__ ((packed));
@@ -1701,6 +1702,7 @@ enum v4l2_ctrl_type {
 	V4L2_CTRL_TYPE_HEVC_SPS = 0x0110,
 	V4L2_CTRL_TYPE_HEVC_PPS = 0x0111,
 	V4L2_CTRL_TYPE_HEVC_SLICE_PARAMS = 0x0112,
+	V4L2_CTRL_TYPE_HEVC_SCALING_MATRIX = 0x0113,
 };
 
 /*  Used in the VIDIOC_QUERYCTRL ioctl for querying controls */
